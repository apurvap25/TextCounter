{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlfor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","classname","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","filter","element","protoTypes","PropTypes","string","isRequired","aboutText","defaultProps","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.e218973e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from \"react-router-dom\";\r\nexport default function Navbar(props){\r\n    return(\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/*<li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/About\">{props.aboutText}</a>\r\n    </li>*/}\r\n          \r\n            </ul>\r\n            {/*<form className=\"d-flex\" role=\"search\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n    </form>*/}\r\n    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n</div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\nNavbar.protoTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps={\r\n    title: 'Set title here',\r\n    aboutText: 'About Text here'\r\n};","import React , {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick=()=>{\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to uppercase!\",\"success\");\r\n    }\r\n    const handleLowClick=()=>{\r\n       let newText=text.toLowerCase();\r\n       setText(newText);\r\n       props.showAlert(\"converted to lowercase!\",\"success\");\r\n   }\r\n   const setClear=()=>{\r\n     let newText=(\" \")\r\n     setText(newText);\r\n     props.showAlert(\"Cleared text!\",\"success\");\r\n    }\r\n    const handleCopy=()=>{\r\n      var text=document.getElementById(\"myBox\");\r\n      text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n      document.getSelection().removeAllRanges();\r\n      props.showAlert(\"Copied to clipboard!\",\"success\");\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        setText(event.target.value); \r\n    }\r\n \r\n    const [text, setText]= useState('');\r\n   // text=\"new text\"; //wrong way to change the state\r\n    //setText(\"New text\"); //correct way \r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color:props.mode==='dark'?'white':'#04274'}}>\r\n      <h1 classname= 'mb-2'>{props.heading} </h1>\r\n      <div className=\"mb-3\">\r\n  <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'#13466e':'white',color:props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n</div>\r\n    <button  disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n    <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n    <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={setClear}>Clear Text</button>\r\n    <button  disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n    </div>\r\n    <div className=\"container my-2\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n      <h1>Your text summary</h1>\r\n      <p>{text.split(/\\s+/).filter((element)=>{return element.length!=0}).length} words and {text.length} characters</p>\r\n      <p>{text.split(\".\").length} sentences</p>\r\n      <p>{0.008*text.split(\" \").filter((element)=>{return element.length!=0}).length}. Minutes to read</p>\r\n      <h1>Preview</h1>\r\n      <p>{text.length>0?text:\"Nothing  to preview it here\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const capitalize=(word)=>{\r\n     const lower=word.toLowerCase();\r\n     return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    <div style={{height: '50px'}}>\r\n  {props.alert && \r\n \r\n      <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n  <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n</div>}\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n\r\n","//import { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n//import React from \"react\";\n\n//import { Routes, Route, Router } from \"react-router-dom\";\n//import { Switch, Route } from \"react-router-dom\";\n//import { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\n\nfunction App() {\n \n  const [mode,setMode]=useState('light'); //whether darkmode is enabled or not\n  const [alert, setAlert]=useState(null);\n  const showAlert=(message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n     setAlert(null);\n    },1500);\n  }\n  const toggleMode=()=>{\n      if(mode==='light'){\n        setMode('dark');\n        document.body.style.backgroundColor='#042743';\n        showAlert(\"Dark mode has been enabled\",\"success\");\n      } \n      else{\n        setMode('light');\n        document.body.style.backgroundColor='white';\n        showAlert(\"Light mode has been enabled\",\"success\");\n      }\n  }\n\n  return (\n   \n<>\n{/*<Navbar title=\"TextiUtils\" aboutText=\"About TextUtils\"/>*/}\n{/* <Navbar/> */}\n{/*<Router>*/}\n<Navbar title=\"TextCounter\" mode={mode} toggleMode={toggleMode}/>\n<Alert alert={alert}/>\n<div className=\"container my-3\">\n <TextForm showAlert={showAlert} heading=\"TextCounter - word counter, character counter\" mode={mode}/>\n          \n        </div>\n        </>\n   \n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}